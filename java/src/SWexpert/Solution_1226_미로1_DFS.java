package SWexpert;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StringReader;

/**
 *  @author mozy
 *  @since 2020. 12. 20.
 *  @see  https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14vXUqAGMCFAYD
 *  @mem 23,668
 *  @time 115 
 *  @caution 
 *  dfs 로 문제 풀음
*/
public class Solution_1226_미로1_DFS {
	
	static int N = 16;
	static int result;
	static int [][] map;
	static boolean [][] visited;
	static int [][] dir = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};

	static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws Exception {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		in = new BufferedReader(new StringReader(src));
		
		for(int i = 1; i < 11; i++) {
			map = new int [N][N];
			visited = new boolean [N][N];
			int sRow = 0;
			int sColumn = 0;
			in.readLine();
			
			// input
			for(int row = 0; row < N; row++) {
				String line = in.readLine();
				for(int column = 0; column < N; column++) {
					map[row][column] = line.charAt(column) - 48;
					if(map[row][column] == 2) {
						sRow = row;
						sColumn = column;
					}
				}
			}
			// run
			result = 0;
			dfs(sRow, sColumn);
			sb.append("#" + i + " " + result).append("\n");
			
		} // TC for
		
		System.out.println(sb);
		
	} // main
	
	static void dfs(int row, int column) {
		if(map[row][column] == 3) {
			result = 1;
			return;
		}
		if(map[row][column] == 1)  {
			return;
		}
		if(visited[row][column]) {
			return;
		}
		
		visited[row][column] = true;
		
		for(int d = 0; d < 4; d++) {
			int _row = row + dir[d][0];
			int _column = column + dir[d][1];
			if(isIn(_row, _column)) {
				dfs(_row, _column);
			}
		}
	}
	
	static boolean isIn(int row, int column) {
		return 0 <= row && row < N && 0 <= column && column < N;
	}
	
	static void print() {
		for(int row = 0; row < N; row++) {
			for(int column = 0; column < N; column++) {
				System.out.print(map[row][column] + " ");
			}
			System.out.println();
		}
		System.out.println();
	}
	
	static String src = "1\n" + 
			"1111111111111111\n" + 
			"1210000000100011\n" + 
			"1010101110101111\n" + 
			"1000100010100011\n" + 
			"1111111010101011\n" + 
			"1000000010101011\n" + 
			"1011111110111011\n" + 
			"1010000010001011\n" + 
			"1010101111101011\n" + 
			"1010100010001011\n" + 
			"1010111010111011\n" + 
			"1010001000100011\n" + 
			"1011101111101011\n" + 
			"1000100000001311\n" + 
			"1111111111111111\n" + 
			"1111111111111111\n" + 
			"2\n" + 
			"1111111111111111\n" + 
			"1200000010000011\n" + 
			"1011111011111011\n" + 
			"1000001010000011\n" + 
			"1110101010111011\n" + 
			"1010101010100011\n" + 
			"1011111010111111\n" + 
			"1000001010000011\n" + 
			"1011101011111011\n" + 
			"1010101010000011\n" + 
			"1010101010111111\n" + 
			"1010100000130011\n" + 
			"1010111111111011\n" + 
			"1000000000000011\n" + 
			"1111111111111111\n" + 
			"1111111111111111\n" + 
			"3\n" + 
			"1111111111111111\n" + 
			"1210001000100011\n" + 
			"1010101010101011\n" + 
			"1000100010101011\n" + 
			"1011111110101011\n" + 
			"1000001010101011\n" + 
			"1111101010101011\n" + 
			"1010001000001011\n" + 
			"1010111111111011\n" + 
			"1010000000100011\n" + 
			"1011111110101111\n" + 
			"1000001010100011\n" + 
			"1011101010111011\n" + 
			"1000100000130011\n" + 
			"1111111111111111\n" + 
			"1111111111111111\n" + 
			"4\n" + 
			"1111111111111111\n" + 
			"1200100000000011\n" + 
			"1011101110111011\n" + 
			"1000001010101011\n" + 
			"1111111011101011\n" + 
			"1000100010000011\n" + 
			"1010101010111111\n" + 
			"1010001010001011\n" + 
			"1011111011101011\n" + 
			"1000100010100011\n" + 
			"1110101110111111\n" + 
			"1010100000130011\n" + 
			"1010111111111011\n" + 
			"1000000000000011\n" + 
			"1111111111111111\n" + 
			"1111111111111111\n" + 
			"5\n" + 
			"1111111111111111\n" + 
			"1210000000100011\n" + 
			"1010111011101011\n" + 
			"1010100010001011\n" + 
			"1011101010111011\n" + 
			"1000001010001011\n" + 
			"1111111011111011\n" + 
			"1000100010000011\n" + 
			"1011101010111011\n" + 
			"1010001000001011\n" + 
			"1010101011111111\n" + 
			"1010101000000011\n" + 
			"1010101110111011\n" + 
			"1000100010001311\n" + 
			"1111111111111111\n" + 
			"1111111111111111\n" + 
			"6\n" + 
			"1111111111111111\n" + 
			"1210001010000011\n" + 
			"1010101010111111\n" + 
			"1010100000100011\n" + 
			"1010111111101011\n" + 
			"1000100000001011\n" + 
			"1110101111111011\n" + 
			"1000100000001011\n" + 
			"1011101111101011\n" + 
			"1000101000101011\n" + 
			"1110101010111011\n" + 
			"1010100010100011\n" + 
			"1010111110101111\n" + 
			"1000000000100311\n" + 
			"1111111111111111\n" + 
			"1111111111111111\n" + 
			"7\n" + 
			"1111111111111111\n" + 
			"1210000000000011\n" + 
			"1011101111111011\n" + 
			"1000101010000011\n" + 
			"1110101010111011\n" + 
			"1000001000101011\n" + 
			"1010111111101111\n" + 
			"1010100000100011\n" + 
			"1011101110101111\n" + 
			"1000001000100011\n" + 
			"1111111011111011\n" + 
			"1000100010001011\n" + 
			"1010101110111011\n" + 
			"1010001300000011\n" + 
			"1111111111111111\n" + 
			"1111111111111111\n" + 
			"8\n" + 
			"1111111111111111\n" + 
			"1200000010000011\n" + 
			"1111111010111011\n" + 
			"1000000010001011\n" + 
			"1011111111111011\n" + 
			"1010000000000011\n" + 
			"1010111111101011\n" + 
			"1010000000001011\n" + 
			"1010111011111011\n" + 
			"1000100010001011\n" + 
			"1111111011101011\n" + 
			"1000001000100011\n" + 
			"1110111110101011\n" + 
			"1000000000101311\n" + 
			"1111111111111111\n" + 
			"1111111111111111\n" + 
			"9\n" + 
			"1111111111111111\n" + 
			"1200000000001011\n" + 
			"1011111111101011\n" + 
			"1000000010001011\n" + 
			"1111111010111011\n" + 
			"1000100010000011\n" + 
			"1011101111111011\n" + 
			"1010001000001011\n" + 
			"1010111011101011\n" + 
			"1010000010101311\n" + 
			"1011111110101111\n" + 
			"1000100000100011\n" + 
			"1011101011111011\n" + 
			"1000001000000011\n" + 
			"1111111111111111\n" + 
			"1111111111111111\n" + 
			"10\n" + 
			"1111111111111111\n" + 
			"1200001000100011\n" + 
			"1111101110101011\n" + 
			"1000100010001011\n" + 
			"1011101111101111\n" + 
			"1000100000000011\n" + 
			"1110111111101011\n" + 
			"1000000010001011\n" + 
			"1110111011101011\n" + 
			"1010001000001011\n" + 
			"1010101111111011\n" + 
			"1000101010000011\n" + 
			"1010101010101111\n" + 
			"1010100000100311\n" + 
			"1111111111111111\n" + 
			"1111111111111111";
}
